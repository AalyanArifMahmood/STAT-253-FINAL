# library statements
library(readr)
library(ggplot2)
library(dplyr)
library(tidymodels)
tidymodels_prefer()
library(vip)
library(ranger)
library(rpart.plot)
set.seed(123)
# read in data
Titanic <- read_csv("Data/train.csv")
titan_fit %>%
extract_fit_engine() %>%
rpart.plot()
knitr::opts_chunk$set(echo = TRUE)
# library statements
library(readr)
library(ggplot2)
library(dplyr)
library(tidymodels)
library(TTR)
library(pracma)
tidymodels_prefer()
set.seed(123)
# read in data
Stock <- read_csv("Data/indexData.csv")
# data cleaning
Stock_clean <- Stock %>%
select(Index : Close) %>%
na.omit() %>%
filter(Open != "null",
High != "null",
Low != "null",
Close != "null")
Stock_clean %>%
group_by(Index) %>%
summarize(n = n()) %>%
arrange(desc(n))
Stock_clean <- Stock_clean %>%
filter(Index == "NYA") %>%
mutate(Open = as.numeric(Open),
High = as.numeric(High),
Low = as.numeric(Low),
Close = as.numeric(Close))
Stock_clean %>%
ggplot() +
geom_line(aes(x = Date,
y = Open))
Stock_clean <- Stock_clean %>%
mutate(Date = as.numeric(Date))
Stock_clean <- Stock_clean %>%
mutate(rsi = RSI(Close, n=14)) %>%
mutate(ATR = ATR(Stock_clean[,c("High", "Low", "Close")], n=14)) %>%
mutate(EMA = movavg(Stock_clean$Open, n=14, type='e')) %>%
na.omit()
View(Stock_clean)
next_day_open <- Stock_clean %>%
select("Open")
next_day_open <- next_day_open %>%
slice(-1)
next_day_open <- next_day_open %>%
rename(nextDayOpen = Open)
Stock_clean <- head(Stock_clean, -1)
Stock_clean <- cbind(Stock_clean, next_day_open)
View(Stock_clean)
Stock_clean <- cbind(Stock_clean, next_day_open)
# creation of cv folds
Stock_clean_5 <- vfold_cv(Stock_clean, v = 5)
# model spec
lm_spec <-
linear_reg() %>%
set_engine(engine = "lm") %>%
set_mode("regression")
lm_lasso_spec <-
linear_reg() %>%
set_args(mixture = 1, penalty = tune()) %>%
set_engine(engine = 'glmnet') %>%
set_mode('regression')
# recipes
data_rec <- recipe(nextDayOpen ~ rsi+ATR+EMA, data = Stock_clean) %>%
step_nzv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
# library statements
library(readr)
library(ggplot2)
library(dplyr)
library(tidymodels)
library(TTR)
library(pracma)
tidymodels_prefer()
set.seed(123)
# read in data
Stock <- read_csv("Data/indexData.csv")
# data cleaning
Stock_clean <- Stock %>%
select(Index : Close) %>%
na.omit() %>%
filter(Open != "null",
High != "null",
Low != "null",
Close != "null")
Stock_clean %>%
group_by(Index) %>%
summarize(n = n()) %>%
arrange(desc(n))
Stock_clean <- Stock_clean %>%
filter(Index == "NYA") %>%
mutate(Open = as.numeric(Open),
High = as.numeric(High),
Low = as.numeric(Low),
Close = as.numeric(Close))
Stock_clean %>%
ggplot() +
geom_line(aes(x = Date,
y = Open))
Stock_clean <- Stock_clean %>%
mutate(Date = as.numeric(Date))
Stock_clean <- Stock_clean %>%
mutate(rsi = RSI(Close, n=14)) %>%
mutate(ATR = ATR(Stock_clean[,c("High", "Low", "Close")], n=14)) %>%
mutate(EMA = movavg(Stock_clean$Open, n=14, type='e')) %>%
na.omit()
next_day_open <- Stock_clean %>%
select("Open")
next_day_open <- next_day_open %>%
slice(-1)
next_day_open <- next_day_open %>%
rename(nextDayOpen = Open)
Stock_clean <- head(Stock_clean, -1)
View(Stock_clean_5)
# library statements
library(readr)
library(ggplot2)
library(dplyr)
library(tidymodels)
library(TTR)
library(pracma)
tidymodels_prefer()
set.seed(123)
# read in data
Stock <- read_csv("Data/indexData.csv")
View(Stock_clean)
next_day_open <- Stock_clean %>%
select("Open")
next_day_open <- next_day_open %>%
slice(-1)
next_day_open <- next_day_open %>%
rename(nextDayOpen = Open)
Stock_clean <- head(Stock_clean, -1)
Stock_clean <- cbind(Stock_clean, next_day_open)
# model spec
lm_spec <-
linear_reg() %>%
set_engine(engine = "lm") %>%
set_mode("regression")
lm_lasso_spec <-
linear_reg() %>%
set_args(mixture = 1, penalty = tune()) %>%
set_engine(engine = 'glmnet') %>%
set_mode('regression')
# recipes
data_rec <- recipe(nextDayOpen ~ rsi+ATR+EMA, data = Stock_clean) %>%
step_nzv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
#step_corr(all_numeric_predictors())
# workflows
lm_wf <- workflow() %>%
add_recipe(data_rec) %>%
add_model(lm_spec)
lm_lasso_wf <- workflow() %>%
add_recipe(data_rec) %>%
add_model(lm_lasso_spec)
# fit & tune models
fit_lm_model <- fit(lm_wf, Stock_clean)
tidy(fit_lm_model)
lm_lasso_fit <- lm_lasso_wf %>%
fit(data = Stock_clean)
glmnet_output <- lm_lasso_fit %>% extract_fit_parsnip() %>% pluck('fit')
lambdas <- glmnet_output$lambda
coefs_lambdas <-
coefficients(glmnet_output, s = lambdas )  %>%
as.matrix() %>%
t() %>%
as.data.frame() %>%
mutate(lambda = lambdas ) %>%
select(lambda, everything(), -`(Intercept)`) %>%
pivot_longer(cols = -lambda,
names_to = "term",
values_to = "coef") %>%
mutate(var = map_chr(stringr::str_split(term,"_"),~.[1]))
coefs_lambdas %>%
ggplot(aes(x = lambda, y = coef, group = term, color = var)) +
geom_line() +
theme_classic() +
theme(legend.position = "bottom", legend.text=element_text(size=8))
# creation of cv folds
Stock_clean_5 <- vfold_cv(Stock_clean, v = 5)
#  calculate/collect CV metrics
#  For linear regression
lm_result_5 <- fit_resamples(lm_wf,
resamples = Stock_clean_5,
metrics = metric_set(rmse, rsq, mae))
collect_metrics(lm_result_5)
#  for LASSO
penalty_grid <- grid_regular(
penalty(range = c(-3, 3)),
levels = 20)
tune_res <- tune_grid(
lm_lasso_wf,
resamples = Stock_clean_5,
metrics = metric_set(rmse, mae),
grid = penalty_grid
)
autoplot(tune_res) + theme_classic()
best_penalty <- select_best(tune_res, metric = 'rmse')
final_wf <- finalize_workflow(lm_lasso_wf, best_penalty)
final_fit <- fit(final_wf, data = Stock_clean)
tidy(final_fit)
tune_res %>% collect_metrics(summarize = TRUE) %>%
filter(.metric == "rmse") %>%
summarize(mean = mean(mean))
str(Stock_Clean)
str(Stock_clean)
ATR(Stock_clean[,c("High", "Low", "Close")], n=14))
ATR(Stock_clean[,c("High", "Low", "Close")], n=14)
# data cleaning
Stock_clean <- Stock %>%
select(Index : Close) %>%
na.omit() %>%
filter(Open != "null",
High != "null",
Low != "null",
Close != "null")
Stock_clean %>%
group_by(Index) %>%
summarize(n = n()) %>%
arrange(desc(n))
Stock_clean <- Stock_clean %>%
filter(Index == "NYA") %>%
mutate(Open = as.numeric(Open),
High = as.numeric(High),
Low = as.numeric(Low),
Close = as.numeric(Close))
Stock_clean %>%
ggplot() +
geom_line(aes(x = Date,
y = Open))
Stock_clean <- Stock_clean %>%
mutate(Date = as.numeric(Date))
Stock_clean <- Stock_clean %>%
mutate(rsi = RSI(Close, n=14)) %>%
#mutate(ATR = ATR(Stock_clean[,c("High", "Low", "Close")], n=14)) %>%
mutate(EMA = movavg(Stock_clean$Open, n=14, type='e')) %>%
na.omit()
next_day_open <- Stock_clean %>%
select("Open")
next_day_open <- next_day_open %>%
slice(-1)
next_day_open <- next_day_open %>%
rename(nextDayOpen = Open)
Stock_clean <- head(Stock_clean, -1)
Stock_clean <- cbind(Stock_clean, next_day_open)
# creation of cv folds
Stock_clean_5 <- vfold_cv(Stock_clean, v = 5)
# model spec
lm_spec <-
linear_reg() %>%
set_engine(engine = "lm") %>%
set_mode("regression")
lm_lasso_spec <-
linear_reg() %>%
set_args(mixture = 1, penalty = tune()) %>%
set_engine(engine = 'glmnet') %>%
set_mode('regression')
# recipes
data_rec <- recipe(nextDayOpen ~ rsi+EMA, data = Stock_clean) %>%
step_nzv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
#step_corr(all_numeric_predictors())
# workflows
lm_wf <- workflow() %>%
add_recipe(data_rec) %>%
add_model(lm_spec)
lm_lasso_wf <- workflow() %>%
add_recipe(data_rec) %>%
add_model(lm_lasso_spec)
# fit & tune models
fit_lm_model <- fit(lm_wf, Stock_clean)
tidy(fit_lm_model)
lm_lasso_fit <- lm_lasso_wf %>%
fit(data = Stock_clean)
glmnet_output <- lm_lasso_fit %>% extract_fit_parsnip() %>% pluck('fit')
lambdas <- glmnet_output$lambda
coefs_lambdas <-
coefficients(glmnet_output, s = lambdas )  %>%
as.matrix() %>%
t() %>%
as.data.frame() %>%
mutate(lambda = lambdas ) %>%
select(lambda, everything(), -`(Intercept)`) %>%
pivot_longer(cols = -lambda,
names_to = "term",
values_to = "coef") %>%
mutate(var = map_chr(stringr::str_split(term,"_"),~.[1]))
coefs_lambdas %>%
ggplot(aes(x = lambda, y = coef, group = term, color = var)) +
geom_line() +
theme_classic() +
theme(legend.position = "bottom", legend.text=element_text(size=8))
#  calculate/collect CV metrics
#  For linear regression
lm_result_5 <- fit_resamples(lm_wf,
resamples = Stock_clean_5,
metrics = metric_set(rmse, rsq, mae))
collect_metrics(lm_result_5)
#  for LASSO
penalty_grid <- grid_regular(
penalty(range = c(-3, 3)),
levels = 20)
tune_res <- tune_grid(
lm_lasso_wf,
resamples = Stock_clean_5,
metrics = metric_set(rmse, mae),
grid = penalty_grid
)
autoplot(tune_res) + theme_classic()
best_penalty <- select_best(tune_res, metric = 'rmse')
final_wf <- finalize_workflow(lm_lasso_wf, best_penalty)
final_fit <- fit(final_wf, data = Stock_clean)
tidy(final_fit)
tune_res %>% collect_metrics(summarize = TRUE) %>%
filter(.metric == "rmse") %>%
summarize(mean = mean(mean))
plot(x=EMA, y=nextDayOpen, data=Stock_clean)
plot(x=Stock_clean$EMA, y=Stock_clean$nextDayOpen)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
eval = TRUE)
library(ISLR)
install.packages("ISLR")
library(readr)
library(ggplot2)
library(dplyr)
library(tidymodels)
library(vip)
library(ranger)
library(rpart.plot)
library(broom)
library(kknn)
library(glmnet)
library(ISLR)
tidymodels_prefer()
theme_set(theme_bw())
set.seed(123)
Titanic <- read_csv("Data/train.csv")
Titanic <- data("Credit")
Credit <- data("Credit")
# Data Cleaning
Credit
Credit <- data(Credit)
# Data Cleaning
Credit
# Data Cleaning
Credit
Credit <- data("Credit")
data("Credit")
data("Credit")
force(Credit)
View(Credit)
# Data Cleaning
Credit
# Data Cleaning
Credit
# Process the data and make the recipe for regression
rec_r <- recipe(Limit ~ ., data = Credit) %>%
step_nzv(all_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_corr(all_numeric_predictors())
Credit_cv5 <- vfold_cv(Credit, v = 5)
# model spec for OLS
lm_spec <-
linear_reg() %>%
set_engine(engine = "lm") %>%
set_mode("regression")
# workflow for OLS
lm_wf <- workflow() %>%
add_recipe(rec_r) %>%
add_model(lm_spec)
# Fit the OLS model
lm_fit <- fit(lm_wf, titanic_r)
# Fit the OLS model
lm_fit <- fit(lm_wf, Credit)
# Present the OLS model result and its metrics
tidy(lm_fit)
glance(lm_fit)
#  Calculate and collect CV metrics for OLS
lm_output <- fit_resamples(lm_wf,
resamples = Credit_cv5,
metrics = metric_set(rmse, rsq, mae))
collect_metrics(lm_output)
# Visualize the residual plot for OLS
lm_output2 <- lm_fit %>%
predict(new_data = titanic_r) %>%
bind_cols(titanic_r) %>%
mutate(resid = Fare - .pred)
# Visualize the residual plot for OLS
lm_output2 <- lm_fit %>%
predict(new_data = Credit) %>%
bind_cols(Credit) %>%
mutate(resid = Limit - .pred)
ggplot(lm_output2, aes(x = .pred, y = resid)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = 0, color = "red") +
theme_classic()
# Fit the LASSO model
lasso_fit <- lasso_wf %>%
fit(data = Credit)
# model spec for LASSO
lasso_spec <-
linear_reg() %>%
set_args(mixture = 1, penalty = tune()) %>%
set_engine(engine = 'glmnet') %>%
set_mode('regression')
# workflows for LASSO
lasso_wf <- workflow() %>%
add_recipe(rec_r) %>%
add_model(lasso_spec)
# Fit the LASSO model
lasso_fit <- lasso_wf %>%
fit(data = Credit)
# Tune the LASSO model
glmnet_output <-
lasso_fit %>% extract_fit_parsnip() %>% pluck('fit')
lambdas <- glmnet_output$lambda
coefs_lambdas <-
coefficients(glmnet_output, s = lambdas)  %>%
as.matrix() %>%
t() %>%
as.data.frame() %>%
mutate(lambda = lambdas) %>%
select(lambda, everything(),-`(Intercept)`) %>%
pivot_longer(cols = -lambda,
names_to = "term",
values_to = "coef") %>%
mutate(var = map_chr(stringr::str_split(term, "_"),  ~ .[1]))
coefs_lambdas %>%
ggplot(aes(
x = lambda,
y = coef,
group = term,
color = var
)) +
geom_line() +
theme_classic() +
theme(legend.position = "bottom", legend.text = element_text(size = 8))
# Visualize the best penalty term
penalty_grid <- grid_regular(penalty(range = c(-3, 3)),
levels = 20)
lasso_cv <- tune_grid(
lasso_wf,
resamples = Credit_cv5,
metrics = metric_set(rmse, mae, rsq),
grid = penalty_grid
)
autoplot(lasso_cv) + theme_classic()
lasso_fit <- fit(lasso_wf2, data = Credit)
# Present the LASSO model result
best_penalty <- select_best(lasso_cv, metric = 'rmse')
lasso_wf2 <- finalize_workflow(lasso_wf, best_penalty)
lasso_fit <- fit(lasso_wf2, data = Credit)
tidy(lasso_fit)
#  Calculate and collect CV metrics for LASSO
lasso_output <- lasso_cv %>% collect_metrics(summarize = TRUE) %>%
na.omit() %>%
group_by(.metric) %>%
summarize(mean = mean(mean))
lasso_output
# Visualize the residual plot for LASSO
lasso_output2 <- lasso_fit %>%
predict(new_data = titanic_r) %>%
bind_cols(titanic_r) %>%
mutate(resid = Fare - .pred)
# Visualize the residual plot for LASSO
lasso_output2 <- lasso_fit %>%
predict(new_data = Credit) %>%
bind_cols(titanic_r) %>%
mutate(resid = Fare - .pred)
# Visualize the residual plot for LASSO
lasso_output2 <- lasso_fit %>%
predict(new_data = Credit) %>%
bind_cols(Credit) %>%
mutate(resid = Fare - .pred)
# Visualize the residual plot for LASSO
lasso_output2 <- lasso_fit %>%
predict(new_data = Credit) %>%
bind_cols(Credit) %>%
mutate(resid = Limit - .pred)
ggplot(lasso_output2, aes(x = .pred, y = resid)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = 0, color = "red") +
theme_classic()
View(Credit)
View(Credit)
Credit %>%
ggplot(aes(x = Limit,
y = Rating)) +
geom_point()
